// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`objects argNamedQuery 1`] = `
"[@ocaml.ppx.context {cookies: []}];
module MyQuery = {
  let query = \\"query ($query: String!)  {\\\\nargNamedQuery(query: $query)  \\\\n}\\\\n\\";
  type raw_t;
  type t = {. \\"argNamedQuery\\": int};
  type t_variables = {. \\"query\\": string};
  let parse: Js.Json.t => t =
    value => {
      [@metaloc loc]
      let value = value |> Js.Json.decodeObject |> Js.Option.getExn;
      {

        \\"argNamedQuery\\": {
          let value = Js.Dict.unsafeGet(Obj.magic(value), \\"argNamedQuery\\");

          (Obj.magic(value): int);
        },
      };
    };
  let serializeVariables: t_variables => Js.Json.t =
    inp =>
      [|(\\"query\\", (a => Some(Js.Json.string(a)))(inp##query))|]
      |> Js.Array.filter(
           fun
           | (_, None) => false
           | (_, Some(_)) => true,
         )
      |> Js.Array.map(
           fun
           | (k, Some(v)) => (k, v)
           | (k, None) => (k, Js.Json.null),
         )
      |> Js.Dict.fromArray
      |> Js.Json.object_;
  let makeVar = (~f, ~query, ()) =>
    f(
      serializeVariables(
        {

          \\"query\\": query,
        }: t_variables,
      ),
    );
  let makeVariables = makeVar(~f=f => f);
  let make =
    makeVar(~f=variables =>
      {\\"query\\": query, \\"variables\\": variables, \\"parse\\": parse}
    );
  let makeWithVariables = variables => {
    \\"query\\": query,
    \\"variables\\": serializeVariables(variables),
    \\"parse\\": parse,
  };
  let definition = (parse, query, makeVar);
};
"
`;
